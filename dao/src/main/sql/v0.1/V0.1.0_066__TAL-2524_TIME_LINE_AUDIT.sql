 CREATE OR REPLACE PROCEDURE "DBO_TC"."CREATE_AUDIT_TABLES_TIMELINE" (v_table_owner VARCHAR2, v_table_name VARCHAR2, v_audit_table_name VARCHAR2) AUTHID CURRENT_USER
IS
   CURSOR c_tables IS
SELECT ot.owner AS owner, ot.table_name AS table_name
        FROM all_tables ot
       WHERE     ot.owner = v_table_owner
       AND ot.table_name = v_table_name;

   v_sql     VARCHAR2 (8000);
   v_count   NUMBER := 0;
   v_aud     VARCHAR2 (30);
BEGIN
   FOR r_table IN c_tables LOOP
      BEGIN
         v_aud := v_table_owner||'.'||v_audit_table_name||'_AUDIT';
         v_sql :=
               'create table '
            || v_aud
            || ' as select * from '
            || r_table.owner
            || '.'
            || r_table.table_name
            || ' where 0 = 1';
         DBMS_OUTPUT.put_line ('Info: ' || v_sql);

         EXECUTE IMMEDIATE v_sql;
		
         v_count := c_tables%ROWCOUNT;
      EXCEPTION
         WHEN OTHERS
         THEN
            DBMS_OUTPUT.put_line (
                  'Failed to create table '
               || v_aud
               || ' due to '
               || SQLERRM);
      END;
   END LOOP;

   IF v_count = 0
   THEN
      DBMS_OUTPUT.put_line ('No audit tables created');
   ELSE
	   v_sql := 'ALTER TABLE ' || v_aud || ' ADD (DML_INDICATOR CHAR(1), DML_TIMESTAMP TIMESTAMP)';
		 Execute Immediate  v_sql;
      DBMS_OUTPUT.put_line (v_count || ' audit tables created.');
   END IF;
END;

/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','ST_TALENT', 'ST_TALENT');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.ST_TALENT_AUDIT FOR DBO_TC.ST_TALENT_AUDIT';
    Execute Immediate 'grant all on DBO_TC.ST_TALENT_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','TALENT','TALENT');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.TALENT_AUDIT FOR DBO_TC.TALENT_AUDIT';
    Execute Immediate 'grant all on DBO_TC.TALENT_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PERSON','PERSON');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PERSON_AUDIT FOR DBO_TC.PERSON_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PERSON_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PARTY','PARTY');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PARTY_AUDIT FOR DBO_TC.PARTY_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PARTY_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','COMPANY','COMPANY');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.COMPANY_AUDIT FOR DBO_TC.COMPANY_AUDIT';
    Execute Immediate 'grant all on DBO_TC.COMPANY_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','CONTACT','CONTACT');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.CONTACT_AUDIT FOR DBO_TC.CONTACT_AUDIT';
    Execute Immediate 'grant all on DBO_TC.CONTACT_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','GENDER_PLAYS','GENDER_PLAYS');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.GENDER_PLAYS_AUDIT FOR DBO_TC.GENDER_PLAYS_AUDIT';
    Execute Immediate 'grant all on DBO_TC.GENDER_PLAYS_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','OCCUPATION','OCCUPATION');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.OCCUPATION_AUDIT FOR DBO_TC.OCCUPATION_AUDIT';
    Execute Immediate 'grant all on DBO_TC.OCCUPATION_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','GENRE','GENRE');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.GENRE_AUDIT FOR DBO_TC.GENRE_AUDIT';
    Execute Immediate 'grant all on DBO_TC.GENRE_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PARTY_AKA','PARTY_AKA');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PARTY_AKA_AUDIT FOR DBO_TC.PARTY_AKA_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PARTY_AKA_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PARTY_CONTACT','PARTY_CONTACT');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PARTY_CONTACT_AUDIT FOR DBO_TC.PARTY_CONTACT_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PARTY_CONTACT_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PARTY_RELATION','PARTY_RELATION');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PARTY_RELATION_AUDIT FOR DBO_TC.PARTY_RELATION_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PARTY_RELATION_AUDIT to APP_TC';   
END;
/

--pending trigger as well as tabe creation
BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PARTY_STUDIOS_ATTR','PARTY_STD_ATTR');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PARTY_STD_ATTR_AUDIT FOR DBO_TC.PARTY_STD_ATTR_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PARTY_STD_ATTR_AUDIT to APP_TC';   
END;
/
BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PARTY_TEAM','PARTY_TEAM');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PARTY_TEAM_AUDIT FOR DBO_TC.PARTY_TEAM_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PARTY_TEAM_AUDIT to APP_TC';   
END;
/

--pending trigger as well as tabe creation
BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PERSON_CITIZENSHIP','PERSON_CTZN');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PERSON_CTZN_AUDIT FOR DBO_TC.PERSON_CTZN_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PERSON_CTZN_AUDIT to APP_TC';   
END;

/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','RACE_PLAYS','RACE_PLAYS');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.RACE_PLAYS_AUDIT FOR DBO_TC.RACE_PLAYS_AUDIT';
    Execute Immediate 'grant all on DBO_TC.RACE_PLAYS_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','TALENT_GUILD','TALENT_GUILD');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.TALENT_GUILD_AUDIT FOR DBO_TC.TALENT_GUILD_AUDIT';
    Execute Immediate 'grant all on DBO_TC.TALENT_GUILD_AUDIT to APP_TC';   
END;
/
BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','WORK_ELIGIBILITY','WORK_ELIGIBILITY');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.WORK_ELIGIBILITY_AUDIT FOR DBO_TC.WORK_ELIGIBILITY_AUDIT';
    Execute Immediate 'grant all on DBO_TC.WORK_ELIGIBILITY_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','PHONE','PHONE');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.PHONE_AUDIT FOR DBO_TC.PHONE_AUDIT';
    Execute Immediate 'grant all on DBO_TC.PHONE_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','WEB_CONTACT','WEB_CONTACT');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.WEB_CONTACT_AUDIT FOR DBO_TC.WEB_CONTACT_AUDIT';
    Execute Immediate 'grant all on DBO_TC.WEB_CONTACT_AUDIT to APP_TC';   
END;
/

BEGIN
   DBO_TC.CREATE_AUDIT_TABLES_TIMELINE ('DBO_TC','ADDRESS','ADDRESS');
    Execute Immediate 'CREATE OR REPLACE SYNONYM APP_TC.ADDRESS_AUDIT FOR DBO_TC.ADDRESS_AUDIT';
    Execute Immediate 'grant all on DBO_TC.ADDRESS_AUDIT to APP_TC';   
END;
/


--ST_TALENT_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."ST_TALENT_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.st_talent
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.ST_TALENT_AUDIT  (  PARTY_ID , DEAL  , DEAL_EXPIRY_DATE , IS_COMEDY  , IS_DRAMA  , IS_SHOW_RUNNER  , IS_DIVERSITY  , CURRENT_STATUS , DEVELOPMENT_STATUS  , TALENT_ID_DATA_LOAD , TEAM_FLAG  , AVAILABILITY , AVAILABILITY_DATE  , CREDITS , NOTES  , IMMIGRATION_NOTES    , DML_INDICATOR , DML_TIMESTAMP  ) 
  values (   :new.PARTY_ID , :new.DEAL  , :new.DEAL_EXPIRY_DATE , :new.IS_COMEDY  , :new.IS_DRAMA  , :new.IS_SHOW_RUNNER  , :new.IS_DIVERSITY  , :new.CURRENT_STATUS , :new.DEVELOPMENT_STATUS  , :new.TALENT_ID_DATA_LOAD , :new.TEAM_FLAG  , :new.AVAILABILITY , :new.AVAILABILITY_DATE  , :new.CREDITS , :new.NOTES  , :new.IMMIGRATION_NOTES  , 'I' , SYSTIMESTAMP );
END IF;

IF UPDATING THEN
  insert into DBO_TC.ST_TALENT_AUDIT  (  PARTY_ID , DEAL  , DEAL_EXPIRY_DATE , IS_COMEDY  , IS_DRAMA  , IS_SHOW_RUNNER  , IS_DIVERSITY  , CURRENT_STATUS , DEVELOPMENT_STATUS  , TALENT_ID_DATA_LOAD , TEAM_FLAG  , AVAILABILITY , AVAILABILITY_DATE  , CREDITS , NOTES  , IMMIGRATION_NOTES    , DML_INDICATOR , DML_TIMESTAMP  ) 
  values (   :new.PARTY_ID , :new.DEAL  , :new.DEAL_EXPIRY_DATE , :new.IS_COMEDY  , :new.IS_DRAMA  , :new.IS_SHOW_RUNNER  , :new.IS_DIVERSITY  , :new.CURRENT_STATUS , :new.DEVELOPMENT_STATUS  , :new.TALENT_ID_DATA_LOAD , :new.TEAM_FLAG  , :new.AVAILABILITY , :new.AVAILABILITY_DATE  , :new.CREDITS , :new.NOTES  , :new.IMMIGRATION_NOTES  , 'U' , SYSTIMESTAMP );
END IF;

IF DELETING THEN
insert into DBO_TC.ST_TALENT_AUDIT  (  PARTY_ID , DEAL  , DEAL_EXPIRY_DATE , IS_COMEDY  , IS_DRAMA  , IS_SHOW_RUNNER  , IS_DIVERSITY  , CURRENT_STATUS , DEVELOPMENT_STATUS  , TALENT_ID_DATA_LOAD , TEAM_FLAG  , AVAILABILITY , AVAILABILITY_DATE  , CREDITS , NOTES  , IMMIGRATION_NOTES    , DML_INDICATOR , DML_TIMESTAMP  ) 
  values (   :old.PARTY_ID , :old.DEAL  , :old.DEAL_EXPIRY_DATE , :old.IS_COMEDY  , :old.IS_DRAMA  , :old.IS_SHOW_RUNNER  , :old.IS_DIVERSITY  , :old.CURRENT_STATUS , :old.DEVELOPMENT_STATUS  , :old.TALENT_ID_DATA_LOAD , :old.TEAM_FLAG  , :old.AVAILABILITY , :old.AVAILABILITY_DATE  , :old.CREDITS , :old.NOTES  , :old.IMMIGRATION_NOTES    , 'D' , SYSTIMESTAMP );
END IF;

END;
/


--TALENT_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."TALENT_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.talent
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.TALENT_AUDIT (  PARTY_ID , GPMS_ID  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.PARTY_ID , :new.GPMS_ID  , 'I'  , SYSTIMESTAMP  ); 
  END IF;

IF UPDATING THEN
 insert into DBO_TC.TALENT_AUDIT (  PARTY_ID , GPMS_ID  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.PARTY_ID , :new.GPMS_ID  , 'U'  , SYSTIMESTAMP  );
END IF;

IF DELETING THEN
  insert into DBO_TC.TALENT_AUDIT (  PARTY_ID , GPMS_ID  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :old.PARTY_ID , :old.GPMS_ID  , 'D'  , SYSTIMESTAMP  );
END IF;

END;
/


--PERSON_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."PERSON_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.PERSON
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PERSON_AUDIT (  PARTY_ID , FIRST_NAME , LAST_NAME , GENDER , RACE , DOB  , SSN , SSN_END_CHARS  , DOD , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :new.PARTY_ID , :new.FIRST_NAME , :new.LAST_NAME , :new.GENDER , :new.RACE , :new.DOB  , :new.SSN , :new.SSN_END_CHARS  , :new.DOD , 'I' , SYSTIMESTAMP ) ;
  END IF;

IF UPDATING THEN
 insert into DBO_TC.PERSON_AUDIT (  PARTY_ID , FIRST_NAME , LAST_NAME , GENDER , RACE , DOB  , SSN , SSN_END_CHARS  , DOD , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :new.PARTY_ID , :new.FIRST_NAME , :new.LAST_NAME , :new.GENDER , :new.RACE , :new.DOB  , :new.SSN , :new.SSN_END_CHARS  , :new.DOD , 'U' , SYSTIMESTAMP ) ;
END IF;

IF DELETING THEN
 insert into DBO_TC.PERSON_AUDIT (  PARTY_ID , FIRST_NAME , LAST_NAME , GENDER , RACE , DOB  , SSN , SSN_END_CHARS  , DOD , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :old.PARTY_ID , :old.FIRST_NAME , :old.LAST_NAME , :old.GENDER , :old.RACE , :old.DOB  , :old.SSN , :old.SSN_END_CHARS  , :old.DOD , 'D' , SYSTIMESTAMP ) ;
END IF;

END;
/


--PARTY_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."PARTY_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.PARTY
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PARTY_AUDIT (  PARTY_ID  , PARTY_TYPE  , DISPLAY_NAME , IMAGE  , NOTES  , CREATED_BY , CREATED_DATE , UPDATED_BY  , UPDATED_DATE , TA_DISPLAY_NAME  , DATASET_ID , UPDATED_BY_APP  , CREATED_BY_APP , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :new.PARTY_ID  , :new.PARTY_TYPE  , :new.DISPLAY_NAME , :new.IMAGE  , :new.NOTES  , :new.CREATED_BY , :new.CREATED_DATE , :new.UPDATED_BY  , :new.UPDATED_DATE , :new.TA_DISPLAY_NAME  , :new.DATASET_ID , :new.UPDATED_BY_APP  , :new.CREATED_BY_APP , 'I'  , SYSTIMESTAMP ) ;
  END IF;

IF UPDATING THEN
 insert into DBO_TC.PARTY_AUDIT (  PARTY_ID  , PARTY_TYPE  , DISPLAY_NAME , IMAGE  , NOTES  , CREATED_BY , CREATED_DATE , UPDATED_BY  , UPDATED_DATE , TA_DISPLAY_NAME  , DATASET_ID , UPDATED_BY_APP  , CREATED_BY_APP , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :new.PARTY_ID  , :new.PARTY_TYPE  , :new.DISPLAY_NAME , :new.IMAGE  , :new.NOTES  , :new.CREATED_BY , :new.CREATED_DATE , :new.UPDATED_BY  , :new.UPDATED_DATE , :new.TA_DISPLAY_NAME  , :new.DATASET_ID , :new.UPDATED_BY_APP  , :new.CREATED_BY_APP , 'U'  , SYSTIMESTAMP ) ;
 END IF;

IF DELETING THEN
 insert into DBO_TC.PARTY_AUDIT (  PARTY_ID  , PARTY_TYPE  , DISPLAY_NAME , IMAGE  , NOTES  , CREATED_BY , CREATED_DATE , UPDATED_BY  , UPDATED_DATE , TA_DISPLAY_NAME  , DATASET_ID , UPDATED_BY_APP  , CREATED_BY_APP , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :old.PARTY_ID  , :old.PARTY_TYPE  , :old.DISPLAY_NAME , :old.IMAGE  , :old.NOTES  , :old.CREATED_BY , :old.CREATED_DATE , :old.UPDATED_BY  , :old.UPDATED_DATE , :old.TA_DISPLAY_NAME  , :old.DATASET_ID , :old.UPDATED_BY_APP  , :old.CREATED_BY_APP , 'D'  , SYSTIMESTAMP ) ;
 END IF;

END;
/


--COMPANY_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."COMPANY_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.COMPANY
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.COMPANY_AUDIT (  PARTY_ID , COMPANY_NAME , TYPE  , FEDERAL_TAX_ID  , STATE_TAX_ID  , VAT_REG_ID , INCORPORATION_STATE  , INCORPORATION_COUNTRY  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.PARTY_ID , :new.COMPANY_NAME , :new.TYPE  , :new.FEDERAL_TAX_ID  , :new.STATE_TAX_ID  , :new.VAT_REG_ID , :new.INCORPORATION_STATE  , :new.INCORPORATION_COUNTRY  , 'I' , SYSTIMESTAMP  ) ;
  END IF;

IF UPDATING THEN
 insert into DBO_TC.COMPANY_AUDIT (  PARTY_ID , COMPANY_NAME , TYPE  , FEDERAL_TAX_ID  , STATE_TAX_ID  , VAT_REG_ID , INCORPORATION_STATE  , INCORPORATION_COUNTRY  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.PARTY_ID , :new.COMPANY_NAME , :new.TYPE  , :new.FEDERAL_TAX_ID  , :new.STATE_TAX_ID  , :new.VAT_REG_ID , :new.INCORPORATION_STATE  , :new.INCORPORATION_COUNTRY  , 'U' , SYSTIMESTAMP  ) ;
   END IF;

IF DELETING THEN
 insert into DBO_TC.COMPANY_AUDIT (  PARTY_ID , COMPANY_NAME , TYPE  , FEDERAL_TAX_ID  , STATE_TAX_ID  , VAT_REG_ID , INCORPORATION_STATE  , INCORPORATION_COUNTRY  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :old.PARTY_ID , :old.COMPANY_NAME , :old.TYPE  , :old.FEDERAL_TAX_ID  , :old.STATE_TAX_ID  , :old.VAT_REG_ID , :old.INCORPORATION_STATE  , :old.INCORPORATION_COUNTRY  , 'D' , SYSTIMESTAMP  ) ;
  END IF;

END;
/


--CONTACT_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."CONTACT_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.CONTACT
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.CONTACT_AUDIT (  PARTY_ID , DESIGNATION  , TYPE  , NEVER_EMAIL_IND  , BUSINESS_PERSONAL  , DEPARTMENT_ID , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :new.PARTY_ID , :new.DESIGNATION  , :new.TYPE  , :new.NEVER_EMAIL_IND  , :new.BUSINESS_PERSONAL  , :new.DEPARTMENT_ID , 'I' , SYSTIMESTAMP ) ;
  END IF;

IF UPDATING THEN
 insert into DBO_TC.CONTACT_AUDIT (  PARTY_ID , DESIGNATION  , TYPE  , NEVER_EMAIL_IND  , BUSINESS_PERSONAL  , DEPARTMENT_ID , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :new.PARTY_ID , :new.DESIGNATION  , :new.TYPE  , :new.NEVER_EMAIL_IND  , :new.BUSINESS_PERSONAL  , :new.DEPARTMENT_ID , 'U' , SYSTIMESTAMP ) ;
  END IF;

IF DELETING THEN
 insert into DBO_TC.CONTACT_AUDIT (  PARTY_ID , DESIGNATION  , TYPE  , NEVER_EMAIL_IND  , BUSINESS_PERSONAL  , DEPARTMENT_ID , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :old.PARTY_ID , :old.DESIGNATION  , :old.TYPE  , :old.NEVER_EMAIL_IND  , :old.BUSINESS_PERSONAL  , :old.DEPARTMENT_ID , 'D' , SYSTIMESTAMP ) ;
 END IF;

END;
/


--GENDER_PLAYS_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."GENDER_PLAYS_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.GENDER_PLAYS
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.GENDER_PLAYS_AUDIT (  PARTY_ID  , GENDER_SYS_PROP_VAL_ID , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.PARTY_ID  , :new.GENDER_SYS_PROP_VAL_ID , 'I'  , SYSTIMESTAMP);
  END IF;

IF UPDATING THEN
 insert into DBO_TC.GENDER_PLAYS_AUDIT (  PARTY_ID  , GENDER_SYS_PROP_VAL_ID , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.PARTY_ID  , :new.GENDER_SYS_PROP_VAL_ID , 'U'  , SYSTIMESTAMP);
  END IF;

IF DELETING THEN
 insert into DBO_TC.GENDER_PLAYS_AUDIT (  PARTY_ID  , GENDER_SYS_PROP_VAL_ID , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :old.PARTY_ID  , :old.GENDER_SYS_PROP_VAL_ID , 'D'  , SYSTIMESTAMP);
 END IF;

END;
/

--OCCUPATION_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."OCCUPATION_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.OCCUPATION
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.OCCUPATION_AUDIT (  OCCUPATION_ID , PARTY_ID , OCCU_NAME_ID , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :new.OCCUPATION_ID , :new.PARTY_ID , :new.OCCU_NAME_ID , 'I' , SYSTIMESTAMP ) ;
  END IF;

IF UPDATING THEN
 insert into DBO_TC.OCCUPATION_AUDIT (  OCCUPATION_ID , PARTY_ID , OCCU_NAME_ID , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :new.OCCUPATION_ID , :new.PARTY_ID , :new.OCCU_NAME_ID , 'U' , SYSTIMESTAMP ) ;
  END IF;

IF DELETING THEN
 insert into DBO_TC.OCCUPATION_AUDIT (  OCCUPATION_ID , PARTY_ID , OCCU_NAME_ID , DML_INDICATOR  , DML_TIMESTAMP ) 
  values (  :old.OCCUPATION_ID , :old.PARTY_ID , :old.OCCU_NAME_ID , 'D' , SYSTIMESTAMP ) ;
 END IF;

END;
/


--GENRE_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."GENRE_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.GENRE
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.GENRE_AUDIT (  PARTY_ID , GENRE_NAME_ID  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.PARTY_ID , :new.GENRE_NAME_ID  , 'I'  , SYSTIMESTAMP  ) ;
  END IF;

IF UPDATING THEN
 insert into DBO_TC.GENRE_AUDIT (  PARTY_ID , GENRE_NAME_ID  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.PARTY_ID , :new.GENRE_NAME_ID  , 'U'  , SYSTIMESTAMP  ) ;
  END IF;

IF DELETING THEN
 insert into DBO_TC.GENRE_AUDIT (  PARTY_ID , GENRE_NAME_ID  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :old.PARTY_ID , :old.GENRE_NAME_ID  , 'D'  , SYSTIMESTAMP  ) ;
 END IF;

END;
/


----PARTY_AKA_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."PARTY_AKA_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.PARTY_AKA
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PARTY_AKA_AUDIT (  ID , PARTY_ID , AKA_NAME  , LAST_UPDATED_USER , LAST_UPDATED_TS  , IS_CURRENT  , FIRST_NAME  , LAST_NAME  , AKA_IND  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.ID , :new.PARTY_ID , :new.AKA_NAME  , :new.LAST_UPDATED_USER , :new.LAST_UPDATED_TS  , :new.IS_CURRENT  , :new.FIRST_NAME  , :new.LAST_NAME  , :new.AKA_IND  , 'I'  , SYSTIMESTAMP  ) ;
  END IF;

IF UPDATING THEN
 insert into DBO_TC.PARTY_AKA_AUDIT (  ID , PARTY_ID , AKA_NAME  , LAST_UPDATED_USER , LAST_UPDATED_TS  , IS_CURRENT  , FIRST_NAME  , LAST_NAME  , AKA_IND  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.ID , :new.PARTY_ID , :new.AKA_NAME  , :new.LAST_UPDATED_USER , :new.LAST_UPDATED_TS  , :new.IS_CURRENT  , :new.FIRST_NAME  , :new.LAST_NAME  , :new.AKA_IND  , 'U'  , SYSTIMESTAMP  ) ;
  END IF;

IF DELETING THEN
 insert into DBO_TC.PARTY_AKA_AUDIT (  ID , PARTY_ID , AKA_NAME  , LAST_UPDATED_USER , LAST_UPDATED_TS  , IS_CURRENT  , FIRST_NAME  , LAST_NAME  , AKA_IND  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :old.ID , :old.PARTY_ID , :old.AKA_NAME  , :old.LAST_UPDATED_USER , :old.LAST_UPDATED_TS  , :old.IS_CURRENT  , :old.FIRST_NAME  , :old.LAST_NAME  , :old.AKA_IND  , 'I'  , SYSTIMESTAMP  ) ;
 END IF;

END;
/


--PARTY_CONTACT_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."PARTY_CONTACT_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.PARTY_CONTACT
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PARTY_CONTACT_AUDIT (  CONTACT_ID , PARTY_ID , CONTACT_TYPE  , PRIMARY_FLAG  , CREATED_BY , CREATED_DATE , UPDATED_BY  , UPDATE_DATE  , UPDATED_BY_APP  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.CONTACT_ID , :new.PARTY_ID , :new.CONTACT_TYPE  , :new.PRIMARY_FLAG  , :new.CREATED_BY , :new.CREATED_DATE , :new.UPDATED_BY  , :new.UPDATE_DATE  , :new.UPDATED_BY_APP  , 'I'  , SYSTIMESTAMP  ) ;
  END IF;

IF UPDATING THEN
 insert into DBO_TC.PARTY_CONTACT_AUDIT (  CONTACT_ID , PARTY_ID , CONTACT_TYPE  , PRIMARY_FLAG  , CREATED_BY , CREATED_DATE , UPDATED_BY  , UPDATE_DATE  , UPDATED_BY_APP  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :new.CONTACT_ID , :new.PARTY_ID , :new.CONTACT_TYPE  , :new.PRIMARY_FLAG  , :new.CREATED_BY , :new.CREATED_DATE , :new.UPDATED_BY  , :new.UPDATE_DATE  , :new.UPDATED_BY_APP  , 'U'  , SYSTIMESTAMP  ) ;
  END IF;

IF DELETING THEN
 insert into DBO_TC.PARTY_CONTACT_AUDIT (  CONTACT_ID , PARTY_ID , CONTACT_TYPE  , PRIMARY_FLAG  , CREATED_BY , CREATED_DATE , UPDATED_BY  , UPDATE_DATE  , UPDATED_BY_APP  , DML_INDICATOR  , DML_TIMESTAMP  ) 
  values (  :old.CONTACT_ID , :old.PARTY_ID , :old.CONTACT_TYPE  , :old.PRIMARY_FLAG  , :old.CREATED_BY , :old.CREATED_DATE , :old.UPDATED_BY  , :old.UPDATE_DATE  , :old.UPDATED_BY_APP  , 'D'  , SYSTIMESTAMP  ) ;
 END IF;

END;
/

--PARTY_RELATION_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."PARTY_RELATION_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.PARTY_RELATION
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PARTY_RELATION_AUDIT (  PARENT_ID  , CHILD_ID  , RELATION_TYPE  , PARTY_RELATION_ID , RELATION_CREATED_ON , UPDATED_BY_APP  , OCCUPATION_ID  , PRIMARY_FLAG  , RELATION_NAME  , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.PARENT_ID  , :new.CHILD_ID  , :new.RELATION_TYPE  , :new.PARTY_RELATION_ID , :new.RELATION_CREATED_ON  , :new.UPDATED_BY_APP  , :new.OCCUPATION_ID  , :new.PRIMARY_FLAG  , :new.RELATION_NAME  , 'I' , SYSTIMESTAMP ); 
  END IF;

IF UPDATING THEN
 insert into DBO_TC.PARTY_RELATION_AUDIT (  PARENT_ID  , CHILD_ID  , RELATION_TYPE  , PARTY_RELATION_ID , RELATION_CREATED_ON  , UPDATED_BY_APP  , OCCUPATION_ID  , PRIMARY_FLAG  , RELATION_NAME  , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.PARENT_ID  , :new.CHILD_ID  , :new.RELATION_TYPE  , :new.PARTY_RELATION_ID , :new.RELATION_CREATED_ON  , :new.UPDATED_BY_APP  , :new.OCCUPATION_ID  , :new.PRIMARY_FLAG  , :new.RELATION_NAME  , 'U' , SYSTIMESTAMP );
  END IF;

IF DELETING THEN
 insert into DBO_TC.PARTY_RELATION_AUDIT (  PARENT_ID  , CHILD_ID  , RELATION_TYPE  , PARTY_RELATION_ID , RELATION_CREATED_ON  , UPDATED_BY_APP  , OCCUPATION_ID  , PRIMARY_FLAG  , RELATION_NAME  , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :old.PARENT_ID  , :old.CHILD_ID  , :old.RELATION_TYPE  , :old.PARTY_RELATION_ID , :old.RELATION_CREATED_ON  , :old.UPDATED_BY_APP  , :old.OCCUPATION_ID  , :old.PRIMARY_FLAG  , :old.RELATION_NAME  , 'D' , SYSTIMESTAMP );
 END IF;

END;
/

--PARTY_TEAM_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."PARTY_TEAM_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.PARTY_TEAM
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PARTY_TEAM_AUDIT (  ID , PARENT_PARTY_ID  , CHILD_PARTY_ID , LAST_UPDATED_USER  , LAST_UPDATED_TS  , TEAM_MEMBERSHIP_NAME_ID , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.ID , :new.PARENT_PARTY_ID  , :new.CHILD_PARTY_ID , :new.LAST_UPDATED_USER  , :new.LAST_UPDATED_TS  , :new.TEAM_MEMBERSHIP_NAME_ID , 'I' , SYSTIMESTAMP ) ; 
  END IF;

IF UPDATING THEN
 insert into DBO_TC.PARTY_TEAM_AUDIT (  ID , PARENT_PARTY_ID  , CHILD_PARTY_ID , LAST_UPDATED_USER  , LAST_UPDATED_TS  , TEAM_MEMBERSHIP_NAME_ID , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.ID , :new.PARENT_PARTY_ID  , :new.CHILD_PARTY_ID , :new.LAST_UPDATED_USER  , :new.LAST_UPDATED_TS  , :new.TEAM_MEMBERSHIP_NAME_ID , 'U' , SYSTIMESTAMP ) ; 
    END IF;

IF DELETING THEN
 insert into DBO_TC.PARTY_TEAM_AUDIT (  ID , PARENT_PARTY_ID  , CHILD_PARTY_ID , LAST_UPDATED_USER  , LAST_UPDATED_TS  , TEAM_MEMBERSHIP_NAME_ID , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :old.ID , :old.PARENT_PARTY_ID  , :old.CHILD_PARTY_ID , :old.LAST_UPDATED_USER  , :old.LAST_UPDATED_TS  , :old.TEAM_MEMBERSHIP_NAME_ID , 'D' , SYSTIMESTAMP ) ; 
  
  END IF;

END;
/

--RACE_PLAYS_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."RACE_PLAYS_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.RACE_PLAYS
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.RACE_PLAYS_AUDIT (  PARTY_ID , RACE_SYS_PROP_VAL_ID , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.PARTY_ID , :new.RACE_SYS_PROP_VAL_ID , 'I' , SYSTIMESTAMP ); 
  END IF;

IF UPDATING THEN
  insert into DBO_TC.RACE_PLAYS_AUDIT (  PARTY_ID , RACE_SYS_PROP_VAL_ID , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.PARTY_ID , :new.RACE_SYS_PROP_VAL_ID , 'U' , SYSTIMESTAMP );
    END IF;

IF DELETING THEN
  insert into DBO_TC.RACE_PLAYS_AUDIT (  PARTY_ID , RACE_SYS_PROP_VAL_ID , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :old.PARTY_ID , :old.RACE_SYS_PROP_VAL_ID , 'D' , SYSTIMESTAMP );
  END IF;

END;
/

--TALENT_GUILD_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."TALENT_GUILD_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.TALENT_GUILD
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.TALENT_GUILD_AUDIT (  TALENT_GUILD_ID , PARTY_ID , GUILD_ID , DELETED , LOCAL , DML_INDICATOR , DML_TIMESTAMP )  
  values (  :new.TALENT_GUILD_ID , :new.PARTY_ID , :new.GUILD_ID , :new.DELETED , :new.LOCAL , 'I' , SYSTIMESTAMP ) ;
  END IF;

IF UPDATING THEN
   insert into DBO_TC.TALENT_GUILD_AUDIT (  TALENT_GUILD_ID , PARTY_ID , GUILD_ID , DELETED , LOCAL , DML_INDICATOR , DML_TIMESTAMP )  
  values (  :new.TALENT_GUILD_ID , :new.PARTY_ID , :new.GUILD_ID , :new.DELETED , :new.LOCAL , 'U' , SYSTIMESTAMP ) ;
    END IF;

IF DELETING THEN
   insert into DBO_TC.TALENT_GUILD_AUDIT (  TALENT_GUILD_ID , PARTY_ID , GUILD_ID , DELETED , LOCAL , DML_INDICATOR , DML_TIMESTAMP )  
  values (  :old.TALENT_GUILD_ID , :old.PARTY_ID , :old.GUILD_ID , :old.DELETED , :old.LOCAL , 'D' , SYSTIMESTAMP ) ;
  END IF;

END;
/

--WORK_ELIGIBILITY_AUDIT_TRIGGER
CREATE OR REPLACE TRIGGER "DBO_TC"."WORK_ELIGIBILITY_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.WORK_ELIGIBILITY
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.WORK_ELIGIBILITY_AUDIT (  ID , PARTY_ID , WORK_ELIG_TYPE_NAME_ID , COUNTRY , EXPIRY_DATE , STATUS , LAST_UPDATED_USER , LAST_UPDATED_TS , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.ID , :new.PARTY_ID , :new.WORK_ELIG_TYPE_NAME_ID , :new.COUNTRY , :new.EXPIRY_DATE , :new.STATUS , :new.LAST_UPDATED_USER , :new.LAST_UPDATED_TS , 'I' , SYSTIMESTAMP ) ;
  END IF;

IF UPDATING THEN
   insert into DBO_TC.WORK_ELIGIBILITY_AUDIT (  ID , PARTY_ID , WORK_ELIG_TYPE_NAME_ID , COUNTRY , EXPIRY_DATE , STATUS , LAST_UPDATED_USER , LAST_UPDATED_TS , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.ID , :new.PARTY_ID , :new.WORK_ELIG_TYPE_NAME_ID , :new.COUNTRY , :new.EXPIRY_DATE , :new.STATUS , :new.LAST_UPDATED_USER , :new.LAST_UPDATED_TS , 'U' , SYSTIMESTAMP ) ;
    END IF;

IF DELETING THEN
   insert into DBO_TC.WORK_ELIGIBILITY_AUDIT (  ID , PARTY_ID , WORK_ELIG_TYPE_NAME_ID , COUNTRY , EXPIRY_DATE , STATUS , LAST_UPDATED_USER , LAST_UPDATED_TS , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :old.ID , :old.PARTY_ID , :old.WORK_ELIG_TYPE_NAME_ID , :old.COUNTRY , :old.EXPIRY_DATE , :old.STATUS , :old.LAST_UPDATED_USER , :old.LAST_UPDATED_TS , 'D' , SYSTIMESTAMP ) ;
  END IF;

END;
/

CREATE OR REPLACE TRIGGER "DBO_TC"."PERSON_CTZN_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.PERSON_CITIZENSHIP
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PERSON_CTZN_AUDIT    (	PARTY_ID, 	CITIZENSHIP_SYS_PROP_VAL_ID, 	DML_INDICATOR ,	DML_TIMESTAMP    )
  values    (	:new.PARTY_ID, 	:new.CITIZENSHIP_SYS_PROP_VAL_ID, 	'I', 	SYSTIMESTAMP    );
END IF;

IF UPDATING THEN
  insert into DBO_TC.PERSON_CTZN_AUDIT    (	PARTY_ID, 	CITIZENSHIP_SYS_PROP_VAL_ID, 	DML_INDICATOR ,	DML_TIMESTAMP    )
  values    (	:new.PARTY_ID, 	:new.CITIZENSHIP_SYS_PROP_VAL_ID, 	'U', 	SYSTIMESTAMP    );
END IF;

IF DELETING THEN
insert into DBO_TC.PERSON_CTZN_AUDIT    (	PARTY_ID, 	CITIZENSHIP_SYS_PROP_VAL_ID, 	DML_INDICATOR ,	DML_TIMESTAMP    )
  values    (	:old.PARTY_ID, 	:old.CITIZENSHIP_SYS_PROP_VAL_ID, 	'D', 	SYSTIMESTAMP    );
END IF;

END;
/

CREATE OR REPLACE TRIGGER "DBO_TC"."PARTY_STD_ATTR_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.PARTY_STUDIOS_ATTR
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PARTY_STD_ATTR_AUDIT (  ID , PARTY_ID , STUDIO_LOOKUP_ID , NOTES , CREDITS , STATUS_ID , LAST_UPDATED_TS , LAST_UPDATED_USER , DML_INDICATOR , DML_TIMESTAMP ) 
  values (   :new.ID , :new.PARTY_ID , :new.STUDIO_LOOKUP_ID , :new.NOTES , :new.CREDITS , :new.STATUS_ID , :new.LAST_UPDATED_TS , :new.LAST_UPDATED_USER , 'I' , SYSTIMESTAMP ) ;
END IF;

IF UPDATING THEN
  insert into DBO_TC.PARTY_STD_ATTR_AUDIT (  ID , PARTY_ID , STUDIO_LOOKUP_ID , NOTES , CREDITS , STATUS_ID , LAST_UPDATED_TS , LAST_UPDATED_USER , DML_INDICATOR , DML_TIMESTAMP ) 
  values (   :new.ID , :new.PARTY_ID , :new.STUDIO_LOOKUP_ID , :new.NOTES , :new.CREDITS , :new.STATUS_ID , :new.LAST_UPDATED_TS , :new.LAST_UPDATED_USER , 'U' , SYSTIMESTAMP ) ;
END IF;

IF DELETING THEN
insert into DBO_TC.PARTY_STD_ATTR_AUDIT (  ID , PARTY_ID , STUDIO_LOOKUP_ID , NOTES , CREDITS , STATUS_ID , LAST_UPDATED_TS , LAST_UPDATED_USER , DML_INDICATOR , DML_TIMESTAMP ) 
  values (   :old.ID , :old.PARTY_ID , :old.STUDIO_LOOKUP_ID , :old.NOTES , :old.CREDITS , :old.STATUS_ID , :old.LAST_UPDATED_TS , :old.LAST_UPDATED_USER , 'D' , SYSTIMESTAMP ) ;
END IF;

END;
/

CREATE OR REPLACE TRIGGER "DBO_TC"."PHONE_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.phone
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.PHONE_AUDIT (  PHONE_ID , CONTACT_ID , PHONE_TYPE , PHONE_NO , DML_INDICATOR , DML_TIMESTAMP )  
  values (  :new.PHONE_ID , :new.CONTACT_ID , :new.PHONE_TYPE , :new.PHONE_NO , 'I' , SYSTIMESTAMP ) ;
END IF;

IF UPDATING THEN
  insert into DBO_TC.PHONE_AUDIT (  PHONE_ID , CONTACT_ID , PHONE_TYPE , PHONE_NO , DML_INDICATOR , DML_TIMESTAMP )  
  values (  :new.PHONE_ID , :new.CONTACT_ID , :new.PHONE_TYPE , :new.PHONE_NO , 'U' , SYSTIMESTAMP ) ;
END IF;

IF DELETING THEN
  insert into DBO_TC.PHONE_AUDIT (  PHONE_ID , CONTACT_ID , PHONE_TYPE , PHONE_NO , DML_INDICATOR , DML_TIMESTAMP )  
  values (  :old.PHONE_ID , :old.CONTACT_ID , :old.PHONE_TYPE , :old.PHONE_NO , 'D' , SYSTIMESTAMP ) ;
END IF;

END;
/

CREATE OR REPLACE TRIGGER "DBO_TC"."WEB_CONTACT_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.WEB_CONTACT
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.WEB_CONTACT_AUDIT (  WEBCONTACT_ID , CONTACT_ID , CONTACT_TYPE , CONTACT_VALUE , DML_INDICATOR , DML_TIMESTAMP ) 
 values (  :new.WEBCONTACT_ID , :new.CONTACT_ID , :new.CONTACT_TYPE , :new.CONTACT_VALUE , 'I' , SYSTIMESTAMP ) ;
END IF;

IF UPDATING THEN
  insert into DBO_TC.WEB_CONTACT_AUDIT (  WEBCONTACT_ID , CONTACT_ID , CONTACT_TYPE , CONTACT_VALUE , DML_INDICATOR , DML_TIMESTAMP ) 
 values (  :new.WEBCONTACT_ID , :new.CONTACT_ID , :new.CONTACT_TYPE , :new.CONTACT_VALUE , 'U' , SYSTIMESTAMP ) ;
END IF;

IF DELETING THEN
  insert into DBO_TC.WEB_CONTACT_AUDIT (  WEBCONTACT_ID , CONTACT_ID , CONTACT_TYPE , CONTACT_VALUE , DML_INDICATOR , DML_TIMESTAMP ) 
 values (  :old.WEBCONTACT_ID , :old.CONTACT_ID , :old.CONTACT_TYPE , :old.CONTACT_VALUE , 'D' , SYSTIMESTAMP ) ;
END IF;

END;
/

CREATE OR REPLACE TRIGGER "DBO_TC"."ADDRESS_AUDIT_TRIGGER" AFTER INSERT OR UPDATE OR DELETE ON dbo_tc.address
FOR EACH ROW
DECLARE
BEGIN

IF INSERTING THEN
  insert into DBO_TC.ADDRESS_AUDIT (  ADDRESS_ID , CONTACT_ID , LOCATION_NAME , ADDRESS_TYPE , FIRST_LINE , SECOND_LINE , CITY , STATE , ZIP , COUNTRY , THIRD_LINE , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.ADDRESS_ID , :new.CONTACT_ID , :new.LOCATION_NAME , :new.ADDRESS_TYPE , :new.FIRST_LINE , :new.SECOND_LINE , :new.CITY , :new.STATE , :new.ZIP , :new.COUNTRY , :new.THIRD_LINE , 'I' , SYSTIMESTAMP ) ;
END IF;

IF UPDATING THEN
  insert into DBO_TC.ADDRESS_AUDIT (  ADDRESS_ID , CONTACT_ID , LOCATION_NAME , ADDRESS_TYPE , FIRST_LINE , SECOND_LINE , CITY , STATE , ZIP , COUNTRY , THIRD_LINE , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :new.ADDRESS_ID , :new.CONTACT_ID , :new.LOCATION_NAME , :new.ADDRESS_TYPE , :new.FIRST_LINE , :new.SECOND_LINE , :new.CITY , :new.STATE , :new.ZIP , :new.COUNTRY , :new.THIRD_LINE , 'U' , SYSTIMESTAMP ) ;
END IF;

IF DELETING THEN
  insert into DBO_TC.ADDRESS_AUDIT (  ADDRESS_ID , CONTACT_ID , LOCATION_NAME , ADDRESS_TYPE , FIRST_LINE , SECOND_LINE , CITY , STATE , ZIP , COUNTRY , THIRD_LINE , DML_INDICATOR , DML_TIMESTAMP ) 
  values (  :old.ADDRESS_ID , :old.CONTACT_ID , :old.LOCATION_NAME , :old.ADDRESS_TYPE , :old.FIRST_LINE , :old.SECOND_LINE , :old.CITY , :old.STATE , :old.ZIP , :old.COUNTRY , :old.THIRD_LINE , 'D' , SYSTIMESTAMP ) ;
END IF;

END;
/


  CREATE TABLE "DBO_TC"."JOB_STATUS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"JOB_NAME"  VARCHAR2(50 BYTE) NOT NULL, 
	"STATUS_ID" NUMBER, 
	"START_DATE" TIMESTAMP NOT NULL, 
  "END_DATE" TIMESTAMP ,
	 CONSTRAINT "PK_JOB_STATUS_ID" PRIMARY KEY ("ID"));
	 
CREATE OR REPLACE SYNONYM APP_TC.JOB_STATUS FOR DBO_TC.JOB_STATUS;
grant all on DBO_TC.JOB_STATUS to APP_TC;

CREATE TABLE "DBO_TC"."TALENT_TIMELINE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"PROJECT_ID"  NUMBER, 
	"PARTY_ID"  NUMBER NOT NULL, 
  "OPERATION_ID" NUMBER, 
	"UPDATED_BY_APP" VARCHAR2(20CHAR), 
  "FIELD_NAME" VARCHAR2(500CHAR), 
  "OLD_VALUE" VARCHAR2(3000CHAR),
  "NEW_VALUE" VARCHAR2(3000CHAR),
  "CREATED_BY" VARCHAR2(100CHAR),
  "CREATED_DATE" TIMESTAMP,
	 CONSTRAINT "PK_TALENT_TIMELINE_ID" PRIMARY KEY ("ID"),
CONSTRAINT "FK_TALENT_TIMELINE_ID1" FOREIGN KEY ("PARTY_ID") REFERENCES dbo_tc.party(party_id),
CONSTRAINT "FK_TALENT_TIMELINE_ID2" FOREIGN KEY ("OPERATION_ID") REFERENCES DBO_TC.SYS_PROP_VALUE(prop_id)
); 

CREATE OR REPLACE SYNONYM APP_TC.TALENT_TIMELINE FOR DBO_TC.TALENT_TIMELINE;
grant all on DBO_TC.TALENT_TIMELINE to APP_TC;	


--Sequence for ID
CREATE SEQUENCE DBO_TC.SEQ_JOB_STATUS_ID  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

------------- Create synonyms
CREATE OR REPLACE SYNONYM APP_TC.SEQ_JOB_STATUS_ID FOR DBO_TC.SEQ_JOB_STATUS_ID;
grant all on DBO_TC.SEQ_JOB_STATUS_ID to APP_TC;


--Sequence for ID
CREATE SEQUENCE DBO_TC.SEQ_TALENT_TIMELINE_ID  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

------------- Create synonyms
CREATE OR REPLACE SYNONYM APP_TC.SEQ_TALENT_TIMELINE_ID FOR DBO_TC.SEQ_TALENT_TIMELINE_ID;
grant all on DBO_TC.SEQ_TALENT_TIMELINE_ID to APP_TC;




insert into DBO_TC.SYS_PROPERTY values(dbo_tc.SEQ_SYS_PROP_ID.nextval, 'JOB_STATUS');

insert into DBO_TC.SYS_PROP_VALUE values(dbo_tc.SEQ_SYS_PROP_VALUE_ID.nextval, (select SYS_PROP_ID from DBO_TC.SYS_PROPERTY where sys_prop_name = 'JOB_STATUS'),'In Progress', null, null);
insert into DBO_TC.SYS_PROP_VALUE values(dbo_tc.SEQ_SYS_PROP_VALUE_ID.nextval, (select SYS_PROP_ID from DBO_TC.SYS_PROPERTY where sys_prop_name = 'JOB_STATUS'),'Done', null, null);

insert into DBO_TC.SYS_PROPERTY values(dbo_tc.SEQ_SYS_PROP_ID.nextval, 'DML_OPERATION');

insert into DBO_TC.SYS_PROP_VALUE values(dbo_tc.SEQ_SYS_PROP_VALUE_ID.nextval, (select SYS_PROP_ID from DBO_TC.SYS_PROPERTY where sys_prop_name = 'DML_OPERATION'),'Added', null, null);
insert into DBO_TC.SYS_PROP_VALUE values(dbo_tc.SEQ_SYS_PROP_VALUE_ID.nextval, (select SYS_PROP_ID from DBO_TC.SYS_PROPERTY where sys_prop_name = 'DML_OPERATION'),'Deleted', null, null);
insert into DBO_TC.SYS_PROP_VALUE values(dbo_tc.SEQ_SYS_PROP_VALUE_ID.nextval, (select SYS_PROP_ID from DBO_TC.SYS_PROPERTY where sys_prop_name = 'DML_OPERATION'),'Updated', null, null);

commit;